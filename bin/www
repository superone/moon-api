#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app/server');
var path = require("path");
var colors = require("colors");
var fs = require('fs');
var adminapp = require("../app/admin");
var debug = require('debug')('moonapi:server');
var http = require('http');
var moonconfig = {};
/**
 * Get port from environment and store in Express.
 */
console.log(__dirname);
colors.setTheme({
  error : "red"
})

if( fs.existsSync(path.join(__dirname , "../moon.config.json")) ){
  moonconfig = require("../moon.config.json");
  app.sysConfig = moonconfig;
  adminapp.sysConfig = moonconfig;
}else{
  console.log("MoonAPI havent init . can't find the moon.config.json in the root!".error);
  process.exit();
}

var port = normalizePort( moonconfig['server-port'] || 3000);
var adminport = moonconfig['admin-port'] || 9999;
app.set('port', port);
adminapp.set('port', adminport);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var adminServer = http.createServer(adminapp);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

adminServer.listen(adminport);
adminServer.on('error', onError);
adminServer.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
